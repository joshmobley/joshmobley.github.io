define(["require","exports"],function(t,o){"use strict";var i=function(){function t(){}return t.prototype.buildTOC=function(){var t={};$(".writing h3").each(function(){var o=$(this).text(),i=$(this).attr("id"),n=$(this).offset().top;t[o]={text:o,id:i,top:n}}),$(".writing").append('<div class="toc-js"><h3>Table of Contents</h3><ol></ol></div>'),$.each(t,function(){$(".toc-js ol").append('<li><a href="#'+this.id+'">'+this.text+"</a></li>")}),$(".toc-js").append('<a href="/writing.html">&larr; back to writing'),$(window).on("scroll",function(){var o=$(window).scrollTop();$.each(t,function(){if(o>=this.top-10)return $(".toc-js .active").removeClass("active"),$('.toc-js a[href="#'+this.id+'"]').addClass("active"),!0})}),$(window).on("hashchange",function(t){var o=window.location.hash;$(".toc-js a").each(function(){$(this).removeClass("active"),o==$(this).attr("href")&&$(this).addClass("active")})})},t.prototype.destroyTOC=function(){$(".toc-js").remove()},t.prototype.repositionTOC=function(t){"up"==t?$(".toc-js").css("padding-top","2em"):"down"==t&&$(".toc-js").css("padding-top","")},t}();o.TOC=i});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvYy5tb2R1bGUudHMiXSwibmFtZXMiOlsiVE9DIiwicHJvdG90eXBlIiwiYnVpbGRUT0MiLCJ0b2MiLCIkIiwiZWFjaCIsInRleHQiLCJ0aGlzIiwiaWQiLCJhdHRyIiwidG9wIiwib2Zmc2V0IiwiYXBwZW5kIiwid2luZG93Iiwib24iLCJzY3JvbGwiLCJzY3JvbGxUb3AiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiZXZlbnQiLCJoYXNoIiwibG9jYXRpb24iLCJkZXN0cm95VE9DIiwicmVtb3ZlIiwicmVwb3NpdGlvblRPQyIsImRpcmVjdGlvbiIsImNzcyIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJ1REFBQSxJQUFBQSxHQUFBLFdBRUksUUFBQUEsTUE0RUosTUExRUlBLEdBQUFDLFVBQUFDLFNBQUEsV0FVSSxHQUFJQyxLQUVKQyxHQUFFLGVBQWVDLEtBQUssV0FDbEIsR0FBSUMsR0FBZ0JGLEVBQUVHLE1BQU1ELE9BQ3hCRSxFQUFjSixFQUFFRyxNQUFNRSxLQUFLLE1BQzNCQyxFQUFlTixFQUFFRyxNQUFNSSxTQUFTRCxHQUVwQ1AsR0FBSUcsSUFDQUEsS0FBUUEsRUFDUkUsR0FBTUEsRUFDTkUsSUFBT0EsS0FLZk4sRUFBRSxZQUFZUSxPQUFPLGlFQUVyQlIsRUFBRUMsS0FBTUYsRUFBSyxXQUNUQyxFQUFFLGNBQWNRLE9BQU8saUJBQW1CTCxLQUFTLEdBQUksS0FBT0EsS0FBVyxLQUFJLGVBR2pGSCxFQUFFLFdBQVdRLE9BQU8sa0RBRXBCUixFQUFFUyxRQUFRQyxHQUFHLFNBQVUsV0FDbkIsR0FBSUMsR0FBU1gsRUFBRVMsUUFBUUcsV0FFdkJaLEdBQUVDLEtBQU1GLEVBQUssV0FDVCxHQUFJWSxHQUFVUixLQUFVLElBQUUsR0FHdEIsTUFGQUgsR0FBRSxtQkFBbUJhLFlBQVksVUFDakNiLEVBQUUsb0JBQXNCRyxLQUFTLEdBQUksTUFBTVcsU0FBUyxXQUM3QyxNQU1uQmQsRUFBRVMsUUFBUUMsR0FBRyxhQUFjLFNBQVNLLEdBQ2hDLEdBQUlDLEdBQU9QLE9BQU9RLFNBQVNELElBRTNCaEIsR0FBRSxhQUFhQyxLQUFLLFdBQ2hCRCxFQUFFRyxNQUFNVSxZQUFZLFVBQ2hCRyxHQUFRaEIsRUFBRUcsTUFBTUUsS0FBSyxTQUNyQkwsRUFBRUcsTUFBTVcsU0FBUyxlQU9qQ2xCLEVBQUFDLFVBQUFxQixXQUFBLFdBQ0lsQixFQUFFLFdBQVdtQixVQUdqQnZCLEVBQUFDLFVBQUF1QixjQUFBLFNBQWVDLEdBQ00sTUFBYkEsRUFDQXJCLEVBQUUsV0FBV3NCLElBQUksY0FBZSxPQUNiLFFBQWJELEdBQ05yQixFQUFFLFdBQVdzQixJQUFJLGNBQWUsS0FPNUMxQixJQTlFQTJCLEdBQUEzQixJQUFBQSIsImZpbGUiOiJ0b2MubW9kdWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFRPQ3tcblxuICAgIGNvbnN0cnVjdG9yKCl7IH1cblxuICAgIGJ1aWxkVE9DKCkgOiB2b2lkIHtcblxuICAgICAgICBpbnRlcmZhY2UgVE9DIHtcbiAgICAgICAgICAgIFtrZXk6IHN0cmluZ106IHtcbiAgICAgICAgICAgICAgICB0ZXh0IDogc3RyaW5nLFxuICAgICAgICAgICAgICAgIGlkIDogc3RyaW5nLFxuICAgICAgICAgICAgICAgIHRvcCA6IG51bWJlclxuICAgICAgICAgICAgfSBcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0b2MgOiBUT0MgPSB7fTtcblxuICAgICAgICAkKCcud3JpdGluZyBoMycpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxldCB0ZXh0IDogc3RyaW5nID0gJCh0aGlzKS50ZXh0KCk7XG4gICAgICAgICAgICBsZXQgaWQgOiBzdHJpbmcgPSAkKHRoaXMpLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICBsZXQgdG9wIDogbnVtYmVyID0gJCh0aGlzKS5vZmZzZXQoKS50b3A7XG5cbiAgICAgICAgICAgIHRvY1t0ZXh0XSA9IHtcbiAgICAgICAgICAgICAgICAndGV4dCc6IHRleHQsXG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3RvcCc6IHRvcFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoJy53cml0aW5nJykuYXBwZW5kKGA8ZGl2IGNsYXNzPVwidG9jLWpzXCI+PGgzPlRhYmxlIG9mIENvbnRlbnRzPC9oMz48b2w+PC9vbD48L2Rpdj5gKTtcblxuICAgICAgICAkLmVhY2goIHRvYywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQoJy50b2MtanMgb2wnKS5hcHBlbmQoJzxsaT48YSBocmVmPVwiIycgKyB0aGlzWydpZCddICsgJ1wiPicgKyB0aGlzWyd0ZXh0J10gKyAnPC9hPjwvbGk+JyApO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKCcudG9jLWpzJykuYXBwZW5kKCc8YSBocmVmPVwiL3dyaXRpbmcuaHRtbFwiPiZsYXJyOyBiYWNrIHRvIHdyaXRpbmcnKTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ3Njcm9sbCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBsZXQgc2Nyb2xsID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAkLmVhY2goIHRvYywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBpZiggc2Nyb2xsID49IHRoaXNbJ3RvcCddLTEwICl7XG4gICAgICAgICAgICAgICAgICAgICQoJy50b2MtanMgLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLnRvYy1qcyBhW2hyZWY9XCIjJyArIHRoaXNbJ2lkJ10gKyAnXCJdJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ2hhc2hjaGFuZ2UnLCBmdW5jdGlvbihldmVudCl7XG4gICAgICAgICAgICBsZXQgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXG4gICAgICAgICAgICAkKCcudG9jLWpzIGEnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgaWYoIGhhc2ggPT0gJCh0aGlzKS5hdHRyKCdocmVmJykgKXtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9XG5cbiAgICBkZXN0cm95VE9DKCkgOiB2b2lkIHtcbiAgICAgICAgJCgnLnRvYy1qcycpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHJlcG9zaXRpb25UT0MoIGRpcmVjdGlvbjogc3RyaW5nICkgOiB2b2lkIHtcbiAgICAgICAgaWYoIGRpcmVjdGlvbiA9PSAndXAnKXtcbiAgICAgICAgICAgICQoJy50b2MtanMnKS5jc3MoJ3BhZGRpbmctdG9wJywgJzJlbScpO1xuICAgICAgICB9ZWxzZSBpZiggZGlyZWN0aW9uID09ICdkb3duJyApe1xuICAgICAgICAgICAgJCgnLnRvYy1qcycpLmNzcygncGFkZGluZy10b3AnLCAnJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBcblxuXG59Il19
